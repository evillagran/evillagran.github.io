<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gotencool's blog - python</title><link>https://blog.gotencool.icu/</link><description></description><atom:link href="https://blog.gotencool.icu/feeds/python.tag.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 23 Aug 2011 00:00:00 -0300</lastBuildDate><item><title>String de largo X al azar en python</title><link>https://blog.gotencool.icu/string-de-largo-x-al-azar-en-python.html</link><description>&lt;p&gt;Un requerimiento simple que nos será útil para generar claves simétricas, llaves de API, etc.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="c1"&gt;# obtener un string al azar con letras mayúsculas, minúsculas y números de largo 100&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Villagrán Morales</dc:creator><pubDate>Tue, 23 Aug 2011 00:00:00 -0300</pubDate><guid>tag:blog.gotencool.icu,2011-08-23:/string-de-largo-x-al-azar-en-python.html/</guid><category>misc</category><category>programación</category><category>python</category></item><item><title>Agregar permisos a un modelo Django luego del syncdb</title><link>https://blog.gotencool.icu/agregar-permisos-a-un-modelo-django-luego-del-syncdb.html</link><description>&lt;p&gt;Hoy tuve que agregar un nuevo permiso a un modelo Django que ya llevaba varias semanas en producción. El problema es que cuando agregamos permisos luego del &lt;code&gt;syncdb&lt;/code&gt;, éstos no se reflejan en la base de datos.&lt;br&gt;
Para poder dar solución a esta necesidad debemos hacerlo por medio de la …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Villagrán Morales</dc:creator><pubDate>Wed, 23 Mar 2011 00:00:00 -0300</pubDate><guid>tag:blog.gotencool.icu,2011-03-23:/agregar-permisos-a-un-modelo-django-luego-del-syncdb.html/</guid><category>misc</category><category>django</category><category>python</category></item><item><title>Las palabras de Yoda sobre cómo se debe importar desde módulos en Python</title><link>https://blog.gotencool.icu/las-palabras-de-yoda-sobre-como-se-debe-importar-desde-modulos-en-python.html</link><description>&lt;p&gt;Extraído desde &lt;a href="http://python.net/%7Egoodger/projects/pycon/2007/idiomatic/handout.html"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;(Exterior Dagobah, jungle, swamp, and mist.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LUKE&lt;/strong&gt;: Is &lt;code&gt;from module import *&lt;/code&gt; better than explicit imports? &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YODA&lt;/strong&gt;: No, not better. Quicker, easier, more seductive. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LUKE&lt;/strong&gt;: But how will I know why explicit imports are better than the wild-card form?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YODA&lt;/strong&gt;: Know you will …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Villagrán Morales</dc:creator><pubDate>Wed, 26 Jan 2011 00:00:00 -0300</pubDate><guid>tag:blog.gotencool.icu,2011-01-26:/las-palabras-de-yoda-sobre-como-se-debe-importar-desde-modulos-en-python.html/</guid><category>misc</category><category>programación</category><category>python</category><category>humor</category></item><item><title>Cortar líneas de código Python para respetar PEP 8</title><link>https://blog.gotencool.icu/cortar-lineas-de-codigo-python-para-respetar-pep-8.html</link><description>&lt;p&gt;Las &lt;a href="http://www.python.org/dev/peps/"&gt;PEP&lt;/a&gt; (Python Enhancement Proposal) son documentos técnicos que presentan procedimientos o información relacionada con el desarrollo o uso de Python hacia la comunidad.&lt;/p&gt;
&lt;p&gt;La finalidad de éstas es mostrar nuevas implementaciones, formas de uso correcta del lenguaje, estandarización, etc.&lt;/p&gt;
&lt;p&gt;La &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8, Style Guide for Python Code&lt;/a&gt;, entrega las …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Villagrán Morales</dc:creator><pubDate>Sat, 08 Jan 2011 00:00:00 -0300</pubDate><guid>tag:blog.gotencool.icu,2011-01-08:/cortar-lineas-de-codigo-python-para-respetar-pep-8.html/</guid><category>misc</category><category>programación</category><category>python</category></item></channel></rss>